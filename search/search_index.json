{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket. Theoretical Foundation Theoretical Foundation: Derivation from Newton's Laws Newton's Second Law Newton's second law states: \\[ \\mathbf{F} = m \\mathbf{a} \\] For a projectile under gravity, the force acting on it is: \\[ \\mathbf{F} = -mg \\hat{j} \\] This results in the differential equations: \\[ m \\frac{d^2 x}{dt^2} = 0, \\quad m \\frac{d^2 y}{dt^2} = -mg \\] Solving for Motion Horizontal Motion \\[ \\frac{d^2 x}{dt^2} = 0 \\] Integrating twice: \\[ \\frac{dx}{dt} = v_0 \\cos\\theta \\] \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] Vertical Motion \\[ \\frac{d^2 y}{dt^2} = -g \\] Integrating twice: \\[ \\frac{dy}{dt} = v_0 \\sin\\theta - g t \\] \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] Time of Flight The projectile hits the ground when y = 0 : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] Range Equation \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] This equation shows the dependence of range on angle and velocity. Analysis of the Range To analyze the range, we compute the horizontal displacement as a function of the launch angle. The range is maximized at an angle of 45 degrees, assuming a level launch and landing surface. We also investigate how variations in initial velocity and gravity affect the range. Practical Applications The principles of projectile motion apply to various real-world scenarios, such as: Sports Physics: Understanding ball trajectories in soccer, basketball, and golf. Engineering: Designing ballistic trajectories for missiles and projectiles. Space Exploration: Calculating launch angles for rockets and planetary landers. Implementation Implemented Python script to simulate projectile motion and visualize the relationship between range and launch angle. import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): \"\"\" Compute the range of a projectile given an initial velocity and launch angle. :param theta: Launch angle in degrees :param v0: Initial velocity (m/s) :param g: Gravitational acceleration (m/s^2), default is Earth's gravity :return: Range of the projectile (m) \"\"\" theta_rad = np.radians(theta) return (v0 ** 2 * np.sin(2 * theta_rad)) / g # Define parameters v0 = 20 # Initial velocity in m/s angles = np.linspace(0, 90, 100) # Angle from 0 to 90 degrees ranges = [projectile_range(theta, v0) for theta in angles] # Plot the results plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range as a Function of Launch Angle\") plt.legend() plt.grid() plt.show() Single Velocity Simulation import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): theta_rad = np.radians(theta) return (v0 ** 2 * np.sin(2 * theta_rad)) / g v0 = 20 # Initial velocity in m/s angles = np.linspace(0, 90, 100) ranges = [projectile_range(theta, v0) for theta in angles] plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range as a Function of Launch Angle\") plt.legend() plt.grid() plt.savefig(\"single_velocity_plot.png\") plt.show() Comparison of Different Velocities velocities = [10, 20, 30] plt.figure(figsize=(10, 5)) for v in velocities: ranges = [projectile_range(theta, v) for theta in angles] plt.plot(angles, ranges, label=f'v0 = {v} m/s') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range for Different Initial Velocities\") plt.legend() plt.grid() plt.savefig(\"velocity_comparison.png\") plt.show() Colab Same Conditions, Different Planets planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Mars\": 3.71} plt.figure(figsize=(10, 5)) for planet, g in planets.items(): ranges = [projectile_range(theta, v0, g) for theta in angles] plt.plot(angles, ranges, label=f'{planet}') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Motion on Different Planets\") plt.legend() plt.grid() plt.savefig(\"planet_comparison.png\") plt.show() Same Velocity, Different Angles angles_to_compare = [15, 30, 45, 60, 75] time = np.linspace(0, 4, num=500) g = 9.81 plt.figure(figsize=(10, 5)) for theta in angles_to_compare: theta_rad = np.radians(theta) x_vals = v0 * np.cos(theta_rad) * time y_vals = v0 * np.sin(theta_rad) * time - 0.5 * g * time ** 2 valid_indices = y_vals >= 0 # Only plot points where y is non-negative plt.plot(x_vals[valid_indices], y_vals[valid_indices], label=f'{theta}\u00b0') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion for Different Angles\") plt.legend() plt.grid() plt.savefig(\"angle_comparison.png\") plt.show() Results The simulation confirms that the maximum range occurs at a 45-degree angle. The graph clearly illustrates how the range varies with launch angle, demonstrating the theoretical prediction. The simulations confirm that the maximum range occurs at a 45-degree angle. The plots illustrate how different parameters affect the range: Higher velocities result in greater ranges. Lower gravity (e.g., on the Moon) increases the range, while higher gravity (e.g., on Jupiter) decreases it. Initial height variations shift the trajectory but do not affect the fundamental 45-degree maximum range rule. Different launch angles demonstrate the sinusoidal dependence of range on angle. Discussion and Future Work While this model provides a solid understanding of projectile motion, real-world conditions introduce additional complexities such as: Air resistance: Affects the range and trajectory. Uneven terrain: Impacts the landing position. Wind effects: Alters the motion path. Future work could incorporate these factors to create a more comprehensive simulation of projectile motion. Conclusion This analysis highlights the importance of launch angle in projectile motion. Through theoretical derivations, computational simulations, and graphical representations, we have demonstrated how different parameters influence the projectile's range. This study serves as a foundation for further investigations into more complex projectile dynamics. Source Colab","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation-derivation-from-newtons-laws","text":"","title":"Theoretical Foundation: Derivation from Newton's Laws"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#newtons-second-law","text":"Newton's second law states: \\[ \\mathbf{F} = m \\mathbf{a} \\] For a projectile under gravity, the force acting on it is: \\[ \\mathbf{F} = -mg \\hat{j} \\] This results in the differential equations: \\[ m \\frac{d^2 x}{dt^2} = 0, \\quad m \\frac{d^2 y}{dt^2} = -mg \\]","title":"Newton's Second Law"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solving-for-motion","text":"","title":"Solving for Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"\\[ \\frac{d^2 x}{dt^2} = 0 \\] Integrating twice: \\[ \\frac{dx}{dt} = v_0 \\cos\\theta \\] \\[ x(t) = v_0 \\cos\\theta \\cdot t \\]","title":"Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"\\[ \\frac{d^2 y}{dt^2} = -g \\] Integrating twice: \\[ \\frac{dy}{dt} = v_0 \\sin\\theta - g t \\] \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\]","title":"Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"The projectile hits the ground when y = 0 : \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\]","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"\\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] This equation shows the dependence of range on angle and velocity.","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"To analyze the range, we compute the horizontal displacement as a function of the launch angle. The range is maximized at an angle of 45 degrees, assuming a level launch and landing surface. We also investigate how variations in initial velocity and gravity affect the range.","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"The principles of projectile motion apply to various real-world scenarios, such as: Sports Physics: Understanding ball trajectories in soccer, basketball, and golf. Engineering: Designing ballistic trajectories for missiles and projectiles. Space Exploration: Calculating launch angles for rockets and planetary landers.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation","text":"Implemented Python script to simulate projectile motion and visualize the relationship between range and launch angle. import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): \"\"\" Compute the range of a projectile given an initial velocity and launch angle. :param theta: Launch angle in degrees :param v0: Initial velocity (m/s) :param g: Gravitational acceleration (m/s^2), default is Earth's gravity :return: Range of the projectile (m) \"\"\" theta_rad = np.radians(theta) return (v0 ** 2 * np.sin(2 * theta_rad)) / g # Define parameters v0 = 20 # Initial velocity in m/s angles = np.linspace(0, 90, 100) # Angle from 0 to 90 degrees ranges = [projectile_range(theta, v0) for theta in angles] # Plot the results plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range as a Function of Launch Angle\") plt.legend() plt.grid() plt.show()","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#single-velocity-simulation","text":"import numpy as np import matplotlib.pyplot as plt def projectile_range(theta, v0, g=9.81): theta_rad = np.radians(theta) return (v0 ** 2 * np.sin(2 * theta_rad)) / g v0 = 20 # Initial velocity in m/s angles = np.linspace(0, 90, 100) ranges = [projectile_range(theta, v0) for theta in angles] plt.figure(figsize=(10, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range as a Function of Launch Angle\") plt.legend() plt.grid() plt.savefig(\"single_velocity_plot.png\") plt.show()","title":"Single Velocity Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#comparison-of-different-velocities","text":"velocities = [10, 20, 30] plt.figure(figsize=(10, 5)) for v in velocities: ranges = [projectile_range(theta, v) for theta in angles] plt.plot(angles, ranges, label=f'v0 = {v} m/s') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range for Different Initial Velocities\") plt.legend() plt.grid() plt.savefig(\"velocity_comparison.png\") plt.show() Colab","title":"Comparison of Different Velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#same-conditions-different-planets","text":"planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Mars\": 3.71} plt.figure(figsize=(10, 5)) for planet, g in planets.items(): ranges = [projectile_range(theta, v0, g) for theta in angles] plt.plot(angles, ranges, label=f'{planet}') plt.xlabel(\"Angle of Projection (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Motion on Different Planets\") plt.legend() plt.grid() plt.savefig(\"planet_comparison.png\") plt.show()","title":"Same Conditions, Different Planets"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#same-velocity-different-angles","text":"angles_to_compare = [15, 30, 45, 60, 75] time = np.linspace(0, 4, num=500) g = 9.81 plt.figure(figsize=(10, 5)) for theta in angles_to_compare: theta_rad = np.radians(theta) x_vals = v0 * np.cos(theta_rad) * time y_vals = v0 * np.sin(theta_rad) * time - 0.5 * g * time ** 2 valid_indices = y_vals >= 0 # Only plot points where y is non-negative plt.plot(x_vals[valid_indices], y_vals[valid_indices], label=f'{theta}\u00b0') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion for Different Angles\") plt.legend() plt.grid() plt.savefig(\"angle_comparison.png\") plt.show()","title":"Same Velocity, Different Angles"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#results","text":"The simulation confirms that the maximum range occurs at a 45-degree angle. The graph clearly illustrates how the range varies with launch angle, demonstrating the theoretical prediction. The simulations confirm that the maximum range occurs at a 45-degree angle. The plots illustrate how different parameters affect the range: Higher velocities result in greater ranges. Lower gravity (e.g., on the Moon) increases the range, while higher gravity (e.g., on Jupiter) decreases it. Initial height variations shift the trajectory but do not affect the fundamental 45-degree maximum range rule. Different launch angles demonstrate the sinusoidal dependence of range on angle.","title":"Results"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-and-future-work","text":"While this model provides a solid understanding of projectile motion, real-world conditions introduce additional complexities such as: Air resistance: Affects the range and trajectory. Uneven terrain: Impacts the landing position. Wind effects: Alters the motion path. Future work could incorporate these factors to create a more comprehensive simulation of projectile motion.","title":"Discussion and Future Work"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This analysis highlights the importance of launch angle in projectile motion. Through theoretical derivations, computational simulations, and graphical representations, we have demonstrated how different parameters influence the projectile's range. This study serves as a foundation for further investigations into more complex projectile dynamics.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#source","text":"Colab","title":"Source"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is a fundamental example of nonlinear dynamics, demonstrating a rich spectrum of behaviors due to the interplay between damping, restoring forces, and external driving forces. Unlike a simple pendulum, which exhibits predictable periodic motion, the forced damped pendulum can display resonance, quasiperiodicity, and even chaotic motion depending on system parameters. Understanding these behaviors is crucial in applications ranging from mechanical resonance in engineering to the study of climate systems and electrical circuits. Theoretical Foundation Governing Equation The equation of motion for a forced damped pendulum is given by: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + c\\sin(\\theta) = A\\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement, - \\(b\\) is the damping coefficient, - \\(c\\) is the restoring force parameter (related to gravity and the length of the pendulum), - \\(A\\) is the amplitude of the external forcing, - \\(\\omega\\) is the driving frequency. For small angles, where \\(\\theta \\approx \\sin\\theta\\) , this equation reduces to a linear form, leading to approximate solutions that describe simple harmonic motion. However, for larger angles, the nonlinearity introduces complex behaviors, including chaotic dynamics. Resonance and Stability When the driving frequency \\(\\omega\\) matches the natural frequency of the pendulum, resonance occurs, leading to large oscillations. Stability analysis reveals that certain parameter ranges lead to periodic, quasiperiodic, or chaotic behavior, depending on the damping and driving force. Analysis of Dynamics To explore the system\u2019s behavior, we analyze the influence of key parameters: Damping coefficient ( \\(b\\) ): High damping suppresses oscillations, while low damping allows sustained motion. Driving amplitude ( \\(A\\) ): Increasing the driving force can push the system into chaotic regimes. Driving frequency ( \\(\\omega\\) ): The frequency affects resonance conditions and synchronization. Practical Applications Colab The forced damped pendulum model is relevant to various real-world systems: - Energy harvesting devices: Exploiting resonance for efficient energy conversion. - Suspension bridges: Studying oscillatory behavior to prevent resonance-related structural failures. - Oscillating electrical circuits: Analogous to the dynamics of driven RLC circuits. Computational Implementation We implemented a numerical simulation using Python\u2019s solve_ivp function to integrate the differential equation. The simulation provides: - Time evolution plots of the pendulum\u2019s motion. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, A, omega_d = 9.81, 1.0, 0.2, 1.2, 2.0 # Equation of motion def pendulum(t, y): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] # Solve ODE t_span, t_eval = (0, 50), np.linspace(0, 50, 1000) sol = solve_ivp(pendulum, t_span, [0.5, 0.0], t_eval=t_eval, method='RK45') # Plot plt.figure(figsize=(8, 5)) plt.plot(sol.t, sol.y[0], 'b', label=r'$\\theta(t)$') plt.xlabel('Time (s)') plt.ylabel('Angle \u03b8 (rad)') plt.title('Time Evolution of the Forced Damped Pendulum') plt.legend() plt.grid() plt.show() Phase portraits to visualize transitions to chaotic behavior. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, A, omega_d = 9.81, 1.0, 0.2, 1.2, 2.0 # Equation of motion def pendulum(t, y): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] # Solve ODE t_span, t_eval = (0, 50), np.linspace(0, 50, 1000) sol = solve_ivp(pendulum, t_span, [0.5, 0.0], t_eval=t_eval, method='RK45') # Plot plt.figure(figsize=(8, 5)) plt.plot(sol.y[0], sol.y[1], 'r', label=r'$\\omega$ vs $\\theta$') plt.xlabel('Angle \u03b8 (rad)') plt.ylabel('Angular Velocity \u03c9 (rad/s)') plt.title('Phase Portrait of the Forced Damped Pendulum') plt.legend() plt.grid() plt.show() Poincar\u00e9 sections import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, A, omega_d = 9.81, 1.0, 0.2, 1.2, 2.0 # Equation of motion def pendulum(t, y): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] # Solve ODE t_span, t_eval = (0, 200), np.linspace(0, 200, 10000) sol = solve_ivp(pendulum, t_span, [0.5, 0.0], t_eval=t_eval, method='RK45') # Extract points at multiples of the driving period T = 2 * np.pi / omega_d poincare_t = np.arange(0, 200, T) poincare_points = [] for t in poincare_t: idx = (np.abs(sol.t - t)).argmin() poincare_points.append(sol.y[:, idx]) poincare_points = np.array(poincare_points) # Plot plt.figure(figsize=(8, 5)) plt.scatter(poincare_points[:, 0] % (2 * np.pi), poincare_points[:, 1], s=5, color='g') plt.xlabel('Angle \u03b8 (mod 2\u03c0)') plt.ylabel('Angular Velocity \u03c9') plt.title(\"Poincar\u00e9 Section\") plt.grid() plt.show() bifurcation diagrams to explore the system\u2019s sensitivity to initial conditions. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, omega_d = 9.81, 1.0, 0.2, 2.0 A_values = np.linspace(0.5, 1.5, 100) T = 2 * np.pi / omega_d theta_final = [] # Equation of motion def pendulum(t, y, A): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] for A in A_values: sol = solve_ivp(pendulum, (0, 300), [0.5, 0.0], args=(A,), t_eval=np.linspace(200, 300, 5000)) poincare_t = np.arange(200, 300, T) poincare_points = [sol.y[0, (np.abs(sol.t - t)).argmin()] for t in poincare_t] theta_final.append(poincare_points) # Flatten lists theta_final = np.array(theta_final) # Plot plt.figure(figsize=(8, 5)) for i, A in enumerate(A_values): plt.scatter([A] * len(theta_final[i]), theta_final[i] % (2 * np.pi), s=1, color='b') plt.xlabel('Driving Amplitude A') plt.ylabel('Angle \u03b8 (mod 2\u03c0)') plt.title(\"Bifurcation Diagram\") plt.grid() plt.show() Results and Discussion Graphical analysis highlights: - Regular oscillations for low forcing amplitudes. Forced, Damped Pendulum A forced, damped pendulum follows the equation: \\[ \\ddot{\\theta} + 2\\beta \\dot{\\theta} + \\omega_0^2 \\sin\\theta = F_0 \\cos(\\omega t) \\] where: \\(\\theta\\) is the angular displacement, \\(\\beta\\) is the damping coefficient, \\(\\omega_0\\) is the natural frequency, \\(F_0\\) is the forcing amplitude, \\(\\omega\\) is the driving frequency. Resonance Explanation Resonance occurs when the external driving frequency ( \\(\\omega\\) ) is close to the system\u2019s natural frequency ( \\(\\omega_0\\) ). The amplitude of oscillations grows significantly when damping is low: \\[ A \\approx \\frac{F_0}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + 4\\beta^2\\omega^2}} \\] For small damping ( \\(\\beta \\approx 0\\) ), at resonance ( \\(\\omega \\approx \\omega_0\\) ): \\[ A \\approx \\frac{F_0}{2\\beta \\omega_0} \\] which shows that smaller damping leads to a higher amplitude. Resonance behavior at specific driving frequencies. Scenario Analysis 1. No force, no damping The pendulum oscillates indefinitely with constant amplitude. This is because there is no external force to drive the system and no damping to dissipate energy. The motion follows simple harmonic oscillation. 2. No force, with damping The amplitude decays over time due to energy loss. Damping removes energy from the system, causing the oscillations to slow down and eventually stop. The motion follows an exponentially decaying sinusoidal pattern. 3. Large forcing The pendulum exhibits higher amplitude oscillations due to the external driving force. A strong external force overcomes damping effects and drives the system with larger oscillations. The response remains periodic but with greater amplitudes. 4. Resonance The oscillations grow significantly when the driving frequency matches the natural frequency. At resonance, the system absorbs energy efficiently, leading to large amplitudes. If damping is minimal, amplitudes can increase dramatically, potentially causing instability. Chaotic motion for certain parameter sets, demonstrated by non-repeating phase space trajectories. Limitations and Extensions The model assumes a simple sinusoidal driving force; more complex forcing functions can be explored. Nonlinear damping effects could provide further insights into real-world applications. Conclusion The forced damped pendulum serves as a compelling case study in nonlinear dynamics. By varying key parameters, we observe a transition from simple periodic motion to chaos, offering insights into both fundamental physics and engineering applications. Further computational studies can deepen our understanding of its complex behavior. Source Colab","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a fundamental example of nonlinear dynamics, demonstrating a rich spectrum of behaviors due to the interplay between damping, restoring forces, and external driving forces. Unlike a simple pendulum, which exhibits predictable periodic motion, the forced damped pendulum can display resonance, quasiperiodicity, and even chaotic motion depending on system parameters. Understanding these behaviors is crucial in applications ranging from mechanical resonance in engineering to the study of climate systems and electrical circuits.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The equation of motion for a forced damped pendulum is given by: \\[ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + c\\sin(\\theta) = A\\cos(\\omega t) \\] where: - \\(\\theta\\) is the angular displacement, - \\(b\\) is the damping coefficient, - \\(c\\) is the restoring force parameter (related to gravity and the length of the pendulum), - \\(A\\) is the amplitude of the external forcing, - \\(\\omega\\) is the driving frequency. For small angles, where \\(\\theta \\approx \\sin\\theta\\) , this equation reduces to a linear form, leading to approximate solutions that describe simple harmonic motion. However, for larger angles, the nonlinearity introduces complex behaviors, including chaotic dynamics.","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-and-stability","text":"When the driving frequency \\(\\omega\\) matches the natural frequency of the pendulum, resonance occurs, leading to large oscillations. Stability analysis reveals that certain parameter ranges lead to periodic, quasiperiodic, or chaotic behavior, depending on the damping and driving force.","title":"Resonance and Stability"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#analysis-of-dynamics","text":"To explore the system\u2019s behavior, we analyze the influence of key parameters: Damping coefficient ( \\(b\\) ): High damping suppresses oscillations, while low damping allows sustained motion. Driving amplitude ( \\(A\\) ): Increasing the driving force can push the system into chaotic regimes. Driving frequency ( \\(\\omega\\) ): The frequency affects resonance conditions and synchronization.","title":"Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#practical-applications","text":"Colab The forced damped pendulum model is relevant to various real-world systems: - Energy harvesting devices: Exploiting resonance for efficient energy conversion. - Suspension bridges: Studying oscillatory behavior to prevent resonance-related structural failures. - Oscillating electrical circuits: Analogous to the dynamics of driven RLC circuits.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#computational-implementation","text":"We implemented a numerical simulation using Python\u2019s solve_ivp function to integrate the differential equation. The simulation provides: - Time evolution plots of the pendulum\u2019s motion. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, A, omega_d = 9.81, 1.0, 0.2, 1.2, 2.0 # Equation of motion def pendulum(t, y): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] # Solve ODE t_span, t_eval = (0, 50), np.linspace(0, 50, 1000) sol = solve_ivp(pendulum, t_span, [0.5, 0.0], t_eval=t_eval, method='RK45') # Plot plt.figure(figsize=(8, 5)) plt.plot(sol.t, sol.y[0], 'b', label=r'$\\theta(t)$') plt.xlabel('Time (s)') plt.ylabel('Angle \u03b8 (rad)') plt.title('Time Evolution of the Forced Damped Pendulum') plt.legend() plt.grid() plt.show() Phase portraits to visualize transitions to chaotic behavior. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, A, omega_d = 9.81, 1.0, 0.2, 1.2, 2.0 # Equation of motion def pendulum(t, y): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] # Solve ODE t_span, t_eval = (0, 50), np.linspace(0, 50, 1000) sol = solve_ivp(pendulum, t_span, [0.5, 0.0], t_eval=t_eval, method='RK45') # Plot plt.figure(figsize=(8, 5)) plt.plot(sol.y[0], sol.y[1], 'r', label=r'$\\omega$ vs $\\theta$') plt.xlabel('Angle \u03b8 (rad)') plt.ylabel('Angular Velocity \u03c9 (rad/s)') plt.title('Phase Portrait of the Forced Damped Pendulum') plt.legend() plt.grid() plt.show() Poincar\u00e9 sections import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, A, omega_d = 9.81, 1.0, 0.2, 1.2, 2.0 # Equation of motion def pendulum(t, y): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] # Solve ODE t_span, t_eval = (0, 200), np.linspace(0, 200, 10000) sol = solve_ivp(pendulum, t_span, [0.5, 0.0], t_eval=t_eval, method='RK45') # Extract points at multiples of the driving period T = 2 * np.pi / omega_d poincare_t = np.arange(0, 200, T) poincare_points = [] for t in poincare_t: idx = (np.abs(sol.t - t)).argmin() poincare_points.append(sol.y[:, idx]) poincare_points = np.array(poincare_points) # Plot plt.figure(figsize=(8, 5)) plt.scatter(poincare_points[:, 0] % (2 * np.pi), poincare_points[:, 1], s=5, color='g') plt.xlabel('Angle \u03b8 (mod 2\u03c0)') plt.ylabel('Angular Velocity \u03c9') plt.title(\"Poincar\u00e9 Section\") plt.grid() plt.show() bifurcation diagrams to explore the system\u2019s sensitivity to initial conditions. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g, l, b, omega_d = 9.81, 1.0, 0.2, 2.0 A_values = np.linspace(0.5, 1.5, 100) T = 2 * np.pi / omega_d theta_final = [] # Equation of motion def pendulum(t, y, A): theta, omega = y return [omega, -b * omega - (g / l) * np.sin(theta) + A * np.cos(omega_d * t)] for A in A_values: sol = solve_ivp(pendulum, (0, 300), [0.5, 0.0], args=(A,), t_eval=np.linspace(200, 300, 5000)) poincare_t = np.arange(200, 300, T) poincare_points = [sol.y[0, (np.abs(sol.t - t)).argmin()] for t in poincare_t] theta_final.append(poincare_points) # Flatten lists theta_final = np.array(theta_final) # Plot plt.figure(figsize=(8, 5)) for i, A in enumerate(A_values): plt.scatter([A] * len(theta_final[i]), theta_final[i] % (2 * np.pi), s=1, color='b') plt.xlabel('Driving Amplitude A') plt.ylabel('Angle \u03b8 (mod 2\u03c0)') plt.title(\"Bifurcation Diagram\") plt.grid() plt.show()","title":"Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#results-and-discussion","text":"Graphical analysis highlights: - Regular oscillations for low forcing amplitudes.","title":"Results and Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum","text":"A forced, damped pendulum follows the equation: \\[ \\ddot{\\theta} + 2\\beta \\dot{\\theta} + \\omega_0^2 \\sin\\theta = F_0 \\cos(\\omega t) \\] where: \\(\\theta\\) is the angular displacement, \\(\\beta\\) is the damping coefficient, \\(\\omega_0\\) is the natural frequency, \\(F_0\\) is the forcing amplitude, \\(\\omega\\) is the driving frequency.","title":"Forced, Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-explanation","text":"Resonance occurs when the external driving frequency ( \\(\\omega\\) ) is close to the system\u2019s natural frequency ( \\(\\omega_0\\) ). The amplitude of oscillations grows significantly when damping is low: \\[ A \\approx \\frac{F_0}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + 4\\beta^2\\omega^2}} \\] For small damping ( \\(\\beta \\approx 0\\) ), at resonance ( \\(\\omega \\approx \\omega_0\\) ): \\[ A \\approx \\frac{F_0}{2\\beta \\omega_0} \\] which shows that smaller damping leads to a higher amplitude. Resonance behavior at specific driving frequencies.","title":"Resonance Explanation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#scenario-analysis","text":"","title":"Scenario Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-no-force-no-damping","text":"The pendulum oscillates indefinitely with constant amplitude. This is because there is no external force to drive the system and no damping to dissipate energy. The motion follows simple harmonic oscillation.","title":"1. No force, no damping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-no-force-with-damping","text":"The amplitude decays over time due to energy loss. Damping removes energy from the system, causing the oscillations to slow down and eventually stop. The motion follows an exponentially decaying sinusoidal pattern.","title":"2. No force, with damping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-large-forcing","text":"The pendulum exhibits higher amplitude oscillations due to the external driving force. A strong external force overcomes damping effects and drives the system with larger oscillations. The response remains periodic but with greater amplitudes.","title":"3. Large forcing"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-resonance","text":"The oscillations grow significantly when the driving frequency matches the natural frequency. At resonance, the system absorbs energy efficiently, leading to large amplitudes. If damping is minimal, amplitudes can increase dramatically, potentially causing instability. Chaotic motion for certain parameter sets, demonstrated by non-repeating phase space trajectories.","title":"4. Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#limitations-and-extensions","text":"The model assumes a simple sinusoidal driving force; more complex forcing functions can be explored. Nonlinear damping effects could provide further insights into real-world applications.","title":"Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusion","text":"The forced damped pendulum serves as a compelling case study in nonlinear dynamics. By varying key parameters, we observe a transition from simple periodic motion to chaos, offering insights into both fundamental physics and engineering applications. Further computational studies can deepen our understanding of its complex behavior.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#source","text":"Colab","title":"Source"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Gravity: Orbital Period and Orbital Radius Motivation Kepler\u2019s Third Law states that the square of the orbital period ( \\(T^2\\) ) is proportional to the cube of the orbital radius ( \\(r^3\\) ). This fundamental relationship provides critical insights into celestial mechanics, governing planetary orbits, satellite motion, and gravitational interactions on both small and cosmic scales. Understanding this law allows astronomers to determine planetary masses, calculate distances in space, and analyze the stability of orbits. Derivation of Kepler's Third Law For a body in a circular orbit around a massive central body (e.g., a planet orbiting a star), the centripetal force required to maintain the orbit is provided by gravitational attraction: \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Since the orbital velocity \\(v\\) is related to the period \\(T\\) by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting this into the equation: \\[ \\frac{G M m}{r^2} = \\frac{m (2\\pi r)^2}{T^2 r} \\] Canceling \\(m\\) and simplifying: \\[ \\frac{G M}{r^2} = \\frac{4\\pi^2 r}{T^2} \\] Rearranging: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This confirms that \\(T^2 \\propto r^3\\) , meaning the square of the orbital period is proportional to the cube of the orbital radius. Implications in Astronomy Planetary Mass Calculation: Given the orbital period and radius of a planet's moon, one can estimate the planet\u2019s mass using Kepler\u2019s Law. Solar System Analysis: The law allows astronomers to determine distances between planets and their stars even without direct measurements. Satellite Orbits: Understanding this relationship helps in designing stable satellite trajectories for communication and observation. Exoplanet Detection: By measuring periodic changes in a star\u2019s brightness due to transiting planets, scientists can infer planetary orbits. Real-World Examples 1. The Moon\u2019s Orbit Around Earth The Moon orbits Earth at an average radius of \\(3.84 \\times 10^5\\) km with a period of 27.3 days. Using Kepler\u2019s Law, we can estimate Earth's mass and verify astronomical models. 2. The Solar System The orbits of planets around the Sun follow Kepler\u2019s Third Law, with larger orbits corresponding to longer periods. For example: Earth: \\(r = 1\\) AU, \\(T = 1\\) year Mars: \\(r \\approx 1.52\\) AU, \\(T \\approx 1.88\\) years Jupiter: \\(r \\approx 5.2\\) AU, \\(T \\approx 11.86\\) years Computational Simulation To visualize the orbital relationship, we employ Python simulations: Circular Orbit Simulation: Generates a circular path for an orbiting body. Marks the central mass. import numpy as np import matplotlib.pyplot as plt def plot_orbit(radius): # Generate circular path theta = np.linspace(0, 2 * np.pi, 100) x = radius * np.cos(theta) y = radius * np.sin(theta) # Plot the orbit plt.figure(figsize=(6, 6)) plt.plot(x, y, label=f'Orbit (r={radius})', color='blue') plt.scatter(0, 0, color='red', label='Central Body', s=100) # Central mass plt.xlabel('X Position') plt.ylabel('Y Position') plt.legend() plt.grid() plt.title('Circular Orbit Simulation') plt.axis('equal') # Ensure the orbit is a perfect circle plt.show() # Call the function with a radius of 1 plot_orbit(1) import numpy as np import matplotlib.pyplot as plt # Define orbital radii (arbitrary units) radii = np.linspace(1, 10, 10) # Calculate orbital periods using Kepler's Third Law (assuming G*M = 1 for simplicity) periods = np.sqrt(radii**3) # Plot the relationship plt.figure(figsize=(6, 4)) plt.plot(radii, periods**2, 'bo-', label=r'$T^2 \\propto r^3$') # Plot T^2 vs. r^3 plt.xlabel('Orbital Radius (r)') plt.ylabel('Orbital Period Squared ($T^2$)') plt.legend() plt.grid() plt.title(\"Kepler\u2019s Third Law Verification\") plt.show() Graph of Kepler\u2019s Law: Plots orbital radius vs. orbital period squared. Demonstrates the \\(T^2 \\propto r^3\\) relationship. import numpy as np import matplotlib.pyplot as plt # Define orbital radii (arbitrary units) radii = np.linspace(1, 10, 10) # Calculate orbital periods using Kepler's Third Law (assuming G*M = 1 for simplicity) periods = np.sqrt(radii**3) # Plot the relationship plt.figure(figsize=(6, 4)) plt.plot(radii, periods**2, 'bo-', label=r'$T^2 \\propto r^3$') # Plot T^2 vs. r^3 plt.xlabel('Orbital Radius (r)') plt.ylabel('Orbital Period Squared ($T^2$)') plt.legend() plt.grid() plt.title(\"Kepler\u2019s Third Law Verification\") plt.show() Animated Orbit Visualization: Creates a dynamic representation of an object moving in a circular orbit. Helps in understanding real-time orbital mechanics. Colab Extension to Elliptical Orbits While Kepler\u2019s Third Law is derived for circular orbits, it holds for elliptical orbits as well, with the semi-major axis \\(a\\) replacing the orbital radius \\(r\\) : \\[ T^2 \\propto a^3 \\] This extends the application of the law to non-circular celestial bodies, including exoplanets, binary star systems, and asteroids. Conclusion Kepler\u2019s Third Law serves as a powerful tool in celestial mechanics, linking orbital periods and radii in a predictable manner. By leveraging computational models and real-world observations, scientists continue to explore planetary systems, enhance satellite technology, and unravel the mysteries of the universe.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#gravity-orbital-period-and-orbital-radius","text":"","title":"Gravity: Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler\u2019s Third Law states that the square of the orbital period ( \\(T^2\\) ) is proportional to the cube of the orbital radius ( \\(r^3\\) ). This fundamental relationship provides critical insights into celestial mechanics, governing planetary orbits, satellite motion, and gravitational interactions on both small and cosmic scales. Understanding this law allows astronomers to determine planetary masses, calculate distances in space, and analyze the stability of orbits.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"For a body in a circular orbit around a massive central body (e.g., a planet orbiting a star), the centripetal force required to maintain the orbit is provided by gravitational attraction: \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\] \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Since the orbital velocity \\(v\\) is related to the period \\(T\\) by: \\[ v = \\frac{2\\pi r}{T} \\] Substituting this into the equation: \\[ \\frac{G M m}{r^2} = \\frac{m (2\\pi r)^2}{T^2 r} \\] Canceling \\(m\\) and simplifying: \\[ \\frac{G M}{r^2} = \\frac{4\\pi^2 r}{T^2} \\] Rearranging: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] This confirms that \\(T^2 \\propto r^3\\) , meaning the square of the orbital period is proportional to the cube of the orbital radius.","title":"Derivation of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications-in-astronomy","text":"Planetary Mass Calculation: Given the orbital period and radius of a planet's moon, one can estimate the planet\u2019s mass using Kepler\u2019s Law. Solar System Analysis: The law allows astronomers to determine distances between planets and their stars even without direct measurements. Satellite Orbits: Understanding this relationship helps in designing stable satellite trajectories for communication and observation. Exoplanet Detection: By measuring periodic changes in a star\u2019s brightness due to transiting planets, scientists can infer planetary orbits.","title":"Implications in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#real-world-examples","text":"","title":"Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-the-moons-orbit-around-earth","text":"The Moon orbits Earth at an average radius of \\(3.84 \\times 10^5\\) km with a period of 27.3 days. Using Kepler\u2019s Law, we can estimate Earth's mass and verify astronomical models.","title":"1. The Moon\u2019s Orbit Around Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-the-solar-system","text":"The orbits of planets around the Sun follow Kepler\u2019s Third Law, with larger orbits corresponding to longer periods. For example: Earth: \\(r = 1\\) AU, \\(T = 1\\) year Mars: \\(r \\approx 1.52\\) AU, \\(T \\approx 1.88\\) years Jupiter: \\(r \\approx 5.2\\) AU, \\(T \\approx 11.86\\) years","title":"2. The Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#computational-simulation","text":"To visualize the orbital relationship, we employ Python simulations: Circular Orbit Simulation: Generates a circular path for an orbiting body. Marks the central mass. import numpy as np import matplotlib.pyplot as plt def plot_orbit(radius): # Generate circular path theta = np.linspace(0, 2 * np.pi, 100) x = radius * np.cos(theta) y = radius * np.sin(theta) # Plot the orbit plt.figure(figsize=(6, 6)) plt.plot(x, y, label=f'Orbit (r={radius})', color='blue') plt.scatter(0, 0, color='red', label='Central Body', s=100) # Central mass plt.xlabel('X Position') plt.ylabel('Y Position') plt.legend() plt.grid() plt.title('Circular Orbit Simulation') plt.axis('equal') # Ensure the orbit is a perfect circle plt.show() # Call the function with a radius of 1 plot_orbit(1) import numpy as np import matplotlib.pyplot as plt # Define orbital radii (arbitrary units) radii = np.linspace(1, 10, 10) # Calculate orbital periods using Kepler's Third Law (assuming G*M = 1 for simplicity) periods = np.sqrt(radii**3) # Plot the relationship plt.figure(figsize=(6, 4)) plt.plot(radii, periods**2, 'bo-', label=r'$T^2 \\propto r^3$') # Plot T^2 vs. r^3 plt.xlabel('Orbital Radius (r)') plt.ylabel('Orbital Period Squared ($T^2$)') plt.legend() plt.grid() plt.title(\"Kepler\u2019s Third Law Verification\") plt.show() Graph of Kepler\u2019s Law: Plots orbital radius vs. orbital period squared. Demonstrates the \\(T^2 \\propto r^3\\) relationship. import numpy as np import matplotlib.pyplot as plt # Define orbital radii (arbitrary units) radii = np.linspace(1, 10, 10) # Calculate orbital periods using Kepler's Third Law (assuming G*M = 1 for simplicity) periods = np.sqrt(radii**3) # Plot the relationship plt.figure(figsize=(6, 4)) plt.plot(radii, periods**2, 'bo-', label=r'$T^2 \\propto r^3$') # Plot T^2 vs. r^3 plt.xlabel('Orbital Radius (r)') plt.ylabel('Orbital Period Squared ($T^2$)') plt.legend() plt.grid() plt.title(\"Kepler\u2019s Third Law Verification\") plt.show() Animated Orbit Visualization: Creates a dynamic representation of an object moving in a circular orbit. Helps in understanding real-time orbital mechanics. Colab","title":"Computational Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#extension-to-elliptical-orbits","text":"While Kepler\u2019s Third Law is derived for circular orbits, it holds for elliptical orbits as well, with the semi-major axis \\(a\\) replacing the orbital radius \\(r\\) : \\[ T^2 \\propto a^3 \\] This extends the application of the law to non-circular celestial bodies, including exoplanets, binary star systems, and asteroids.","title":"Extension to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler\u2019s Third Law serves as a powerful tool in celestial mechanics, linking orbital periods and radii in a predictable manner. By leveraging computational models and real-world observations, scientists continue to explore planetary systems, enhance satellite technology, and unravel the mysteries of the universe.","title":"Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}